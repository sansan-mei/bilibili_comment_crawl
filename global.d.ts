// 给env加类型
declare namespace NodeJS {
  interface ProcessEnv {
    B_VID: string;
    COOKIES: string;
    OID: string;
    EXECUTABLE_PATH: string;
    IS_FETCH_VIDEO_STREAM: string;
    MODEL_PATH: string;
    STATIC_PATH: string;
    YOUTUBE_API_KEY: string;
    YT_DLP_PATH: string;
  }
}

// AnyObject
declare type AnyObject = Record<string, any>;

declare type AnyArray = Array<any>;

declare type IComment = {
  content: string;
  author: string;
  sex: string;
  time: number | string;
  rpid: string;
  childList: Array<IComment>;
  replyCount: number;
  like: number;
  member: AnyObject;
  reply_control: {
    location: string;
    time_desc: string;
    translation_switch: number;
  };
};

declare type BilibiliDetail = {
  title: string;
  description: string;
  duration: string;
  owner: string;
  oid: number;
  view: number;
  danmaku: number;
  reply: number;
  favorite: number;
  coin: number;
  share: number;
  like: number;
  cid: number;
};

declare type BilibiliVideoInfo = {
  data: {
    durl: Array<{
      url: string;
    }>;
  };
};

declare type BilibiliSubtitle = {
  ai_status: number;
  ai_type: number;
  id: number;
  id_str: string;
  is_lock: boolean;
  lan: string;
  lan_doc: string;
  subtitle_url?: string;
  subtitle_url_v2?: string;
  type: number;
};

declare type BilibiliSubtitleDetail = {
  content: string;
  from: number;
  location: number;
  music: number;
  sid: number;
  to: number;
};

declare interface YouTubeComment {
  id: string;
  author: string;
  text: string;
  publishedAt: string;
  likeCount: number;
}

declare interface YouTubeCaption {
  id: string;
  language: string;
  name: string;
  trackKind: string;
  isAutoGenerated: boolean;
}

declare interface YouTubeCommentResponse {
  kind: string;
  etag: string;
  nextPageToken?: string;
  pageInfo: {
    totalResults: number;
    resultsPerPage: number;
  };
  items: Array<{
    kind: string;
    etag: string;
    id: string;
    snippet: {
      channelId: string;
      videoId: string;
      topLevelComment: {
        kind: string;
        etag: string;
        id: string;
        snippet: {
          channelId: string;
          videoId: string;
          textDisplay: string;
          textOriginal: string;
          authorDisplayName: string;
          authorProfileImageUrl: string;
          authorChannelUrl: string;
          authorChannelId: { value: string };
          canRate: boolean;
          viewerRating: string;
          likeCount: number;
          publishedAt: string;
          updatedAt: string;
        };
      };
      canReply: boolean;
      totalReplyCount: number;
      isPublic: boolean;
    };
    replies?: {
      comments: AnyArray;
    };
  }>;
}

declare interface YouTubeVideoInfo {
  id: string;
  title: string;
  description: string;
  channelId: string;
  channelTitle: string;
  publishedAt: string;
  duration: string;
  viewCount: string;
  likeCount: string;
  commentCount: string;
  categoryId: string;
  tags: string[];
  thumbnails: {
    default: IThumbnail;
    medium: IThumbnail;
    high: IThumbnail;
    standard?: IThumbnail;
    maxres?: IThumbnail;
  };
}

declare interface YouTubeThumbnail {
  url: string;
  width: number;
  height: number;
}

declare interface YouTubeVideoResponse {
  kind: string;
  etag: string;
  items: Array<{
    kind: string;
    etag: string;
    id: string;
    snippet: {
      publishedAt: string;
      channelId: string;
      title: string;
      description: string;
      thumbnails: {
        default: IThumbnail;
        medium: IThumbnail;
        high: IThumbnail;
        standard?: IThumbnail;
        maxres?: IThumbnail;
      };
      channelTitle: string;
      tags?: string[];
      categoryId: string;
      liveBroadcastContent: string;
      localized: {
        title: string;
        description: string;
      };
    };
    contentDetails: {
      duration: string;
      dimension: string;
      definition: string;
      caption: string;
      licensedContent: boolean;
      contentRating: AnyObject;
      projection: string;
    };
    statistics: {
      viewCount: string;
      likeCount: string;
      favoriteCount: string;
      commentCount: string;
    };
  }>;
  pageInfo: {
    totalResults: number;
    resultsPerPage: number;
  };
}

declare interface YouTubeCaptionsResponse {
  kind: string;
  etag: string;
  items: Array<{
    kind: string;
    etag: string;
    id: string;
    snippet: {
      videoId: string;
      lastUpdated: string;
      trackKind: string;
      language: string;
      name: string;
      audioTrackType?: string;
      isCC?: boolean;
      isLarge?: boolean;
      isEasyReader?: boolean;
      isDraft?: boolean;
      isAutoGenerated?: boolean;
      status?: string;
    };
  }>;
}
